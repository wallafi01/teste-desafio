name: Deployment ansible

on:
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      instance_name:
        description: 'Instance Name'
        required: true

jobs:
  apply-infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        working-directory: ./src
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"

      - name: Terraform plan
        working-directory: ./src
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./src
        run: terraform apply --auto-approve

  get-ec2-ip:
    runs-on: ubuntu-latest
    needs: [apply-infra]
    steps:
      - name: Wait for EC2 instance to be ready
        run: sleep 100  # Aguarda por 100 segundos até instancia estiver 100%, ajuste conforme necessário

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Obtendo ID da instancia
        id: get-ec2-id
        run: |
          INSTANCE_NAME="${{ github.event.inputs.instance_name }}"
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Obtendo IP Publico da instancia
        id: get-ec2-ip
        run: |
          INSTANCE_ID=$(cat $GITHUB_ENV | grep INSTANCE_ID | cut -d'=' -f2)
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          
  provisioner:
    runs-on: ubuntu-latest
    needs: [apply-infra, get-ec2-ip]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Add SSH private key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        shell: bash

      - name: Set permissions for SSH private key
        run: chmod 600 ~/.ssh/id_rsa

      - name: Create Ansible hosts.ini
        run: |
          echo "[ec2]" > ./ansible/hosts.ini
          echo "ec2-instance ansible_host=${{ env.EC2_PUBLIC_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ./ansible/hosts.ini

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i ./ansible/hosts.ini ./ansible/deploy_codedeploy_agent.yml

----

name: Deployment Pipeline

on:
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  apply-infra:
    runs-on: ubuntu-latest
    steps: 
    - name: Obtendo o código
      uses: actions/checkout@v4.1.5    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1   
    - name: Terraform init
      working-directory: ./src
      run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"
    - name: Terraform plan
      working-directory: ./src
      run: terraform plan 

    - name: Terraform Apply 
      working-directory: ./src
      run: terraform apply --auto-approve  
  
  provisioner_ansible:
    runs-on: ubuntu-latest
    needs: [apply-infra]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Add SSH private key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        shell: bash

      - name: Set permissions for SSH private key
        run: chmod 600 ~/.ssh/id_rsa

      - name: Create Ansible hosts.ini
        run: |
          echo "[ec2]" > ./ansible/hosts.ini
          echo "ec2-instance ansible_host=${{ secrets.EC2_PUBLIC_IP}} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> ./ansible/hosts.ini

      - name: Run Ansible playbook
        run: |
          ansible-playbook -i ./ansible/hosts.ini ./ansible/deploy_codedeploy_agent.yml
   

  deploy-CD:
    runs-on: ubuntu-latest
    needs: [provisioner_ansible]
    steps:
      - uses: actions/checkout@v2
      - name: Upload ZIP to S3
        uses: alexshively/s3-zip-upload-for-codedeploy@v1
        env:
          AWS_SECRET_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BUCKET_NAME: s3-app-challenge01
          AWS_REGION: us-east-1
          SOURCE_MODE: ZIP
          SOURCE_PATH: ./deploy
          DEST_FILE: deploy.zip
          APPLICATION_NAME: app-challenge
          DEPLOYMENTGROUP_NAME: group-app-challenge

