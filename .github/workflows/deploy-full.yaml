name: Deployment Pipeline completa

on:
  release:
    types:
      - created
  workflow_dispatch:
#   push:
#     branches:
#       - main  


jobs:
  apply-infra:
    runs-on: ubuntu-latest
    steps: 
    - name: Obtendo o cÃ³digo
      uses: actions/checkout@v4.1.5    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1   
    - name: Terraform init
      working-directory: ./src
      run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"
    - name: Terraform plan
      working-directory: ./src
      run: terraform plan 

    - name: Terraform Apply 
      working-directory: ./src
      run: terraform apply --auto-approve

    - name: Pegando Id instancia
      id: get_instance_id
      run: echo "INSTANCE_ID=$(terraform output -raw ec2_instance_id)" >> $GITHUB_ENV
      working-directory: ./src     
  
  Instalando-servicos:
    needs: apply-infra
    runs-on: ubuntu-latest     
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1          

      - name: Terraform init
        working-directory: ./src
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"        

      - name: Pegando Id instancia
        run: echo "INSTANCE_ID=$(terraform output -raw ec2_instance_id)" >> $GITHUB_ENV
        working-directory: ./src        
        
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: "us-east-1"
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          command: |
            sudo apt-get update -y
            sudo apt-get upgrade -y
            sudo apt-get install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
        

            sudo snap install amazon-ssm-agent --classic
            sudo systemctl enable amazon-ssm-agent
            sudo systemctl start amazon-ssm-agent
        
            sudo apt-get update -y
            sudo apt-get install -y ruby-full wget
            cd /home/ubuntu
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto
            sudo systemctl enable codedeploy-agent
            sudo systemctl start codedeploy-agent

            sudo apt-get install -y awscli

      
          comment: "Install and configure Nginx, SSM Agent, CodeDeploy Agent, and CloudWatch Agent"
        
      - name: Get the outputs
        run: echo "The Command id is ${{ steps.ssm.outputs.command-id }}"  
        
  deploy-CD:
    runs-on: ubuntu-latest
    needs: [Instalando-servicos]
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1    
      - name: Terraform init
        working-directory: ./src
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"   
        
      - name: Get Terraform Outputs
        run: |
            echo "APPLICATION_NAME=$(terraform output -raw application_name)" >> $GITHUB_ENV
            echo "DEPLOYMENT_GROUP_NAME=$(terraform output -raw deployment_group_name)" >> $GITHUB_ENV
            echo "S3_BUCKET_NAME=$(terraform output -raw bucket_name)" >> $GITHUB_ENV  
        working-directory: ./src   
        
      - name: Upload ZIP to S3
        uses: alexshively/s3-zip-upload-for-codedeploy@v1
        env:
            AWS_SECRET_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            BUCKET_NAME: ${{ env.S3_BUCKET_NAME }}
            AWS_REGION: us-east-1
            SOURCE_MODE: ZIP
            SOURCE_PATH: ./deploy
            DEST_FILE: deploy.zip
            APPLICATION_NAME: ${{env.APPLICATION_NAME}}
            DEPLOYMENTGROUP_NAME: ${{env.DEPLOYMENT_GROUP_NAME}}
                
